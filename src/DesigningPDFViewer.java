
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class DesigningPDFViewer {

    // Complete the designerPdfViewer function below.
    static int designerPdfViewer(int[] alphabetHeightArray, String word) {
        Map<Character,Integer> characterIntegerMap = new HashMap<>();
        int count = 0;
        for(char c = 'a';c<='z';c++) {
            characterIntegerMap.put(c,alphabetHeightArray[count++]);
        }
        char[] wordChar = word.toCharArray();
        int maxCharValue = Integer.MIN_VALUE;
        for(char x : wordChar) {
            int charValue = characterIntegerMap.get(x);
            if(charValue > maxCharValue) {
                maxCharValue = charValue;
            }
        }
        //Once we find the max char value, we multiple it by number of characters in the word
        //and find the area.
        return maxCharValue * wordChar.length;
    }

    public static void main(String[] args) throws IOException {
        String input = "44 -58 15 95 -30 -71 64 94 -3 91 95 4 56 10 50 14 -21 91 22 -51 76 -51 27 -54 5 -92 3 -47 81 -94 -71 78 32 32 -13 59 -7 29 7 -20 28 -17 62 96 -25 26 -50 -41 79 89 10 -33 -15 55 -98 -39 92 14 72 49 52 47 85 89 66 60 31 -45 -59 22 -80 -40 70 79 17 92 -8 -76 -32 -61 95 -27 -18 26 77 39 -13 -81 -86 30 -93 72 -66 99 65 0 -34 -40 4 82 -18 38 -53 -67 -84 -94 -23 -30 -19 -43 -42 98 23 80 -56 -60 89 57 22 38 77 35 -3 -94 -99 60 -34 21 -48 -89 68 -82 0 -56 20 80 -78 -50 84 -57 -87 -28 -27 -30 -3 -83 -69 -33 -60 -43 83 -30 -90 43 29 62 69 89 92 75 -91 18 79 -33 40 20 -51 37 -35 20 37 33 24 7 94 63 45 50 33 64 64 -1 39 61 75 -91 63 70 46 -56 -64 79 -54 -85 -17 65 39 -2 61 -5 97 52 72 -52 4 -59 81 29 -72 -26 -17 75 63 -38 93 -65 43 -2 -92 -86 -16 -65 -88 -36 62 53 -58 -91 -58 -98 -29 -45 32 40 -7 22 -23 -76 -86 75 78 -31 -10 10 4 76 -23 -57 73 -33 27 -59 -46 -66 -51 33 23 -19 -87 -5 -42 -28 -55 25 87 13 -65 18 60 45 -30 45 -95 38 -98 78 77 -9 97 -13 45 3 -50 -75 10 26 50 -46 40 81 32 -82 70 -46 -30 -56 37 -39 33 2 -86 35 4 -34 22 -34 79 68 -11 -21 26 -70 88 -56 -27 68 -39 53 -41 39 -59 -70 41 92 53 -94 42 96 77 56 62 21 -84 -96 67 -41 60 -69 -50 -6 -74 87 69 -50 35 3 87 51 -3 49 87 -1 54 53 31 -64 -12 -25 -35 -79 86 72 -11 96 28 89 -41 19 -12 -56 -84 52 23 -29 8 -33 95 -71 85 25 -18 33 -56 10 25 63 38 -58 96 72 1 -51 67 59 42 18 50 -75 55 74 -4 -43 -4 -57 45 -8 39 -47 34 58 94 93 79 50 -54 68 -13 -54 -68 -21 92 -12 -41 -89 -21 7 -28 59 21 -95 -85 -86 30 71 3 64 26 -79 -92 -46 69 -29 -6 -5 -2 54 19 -90 -85 0 -6 37 45 3 85 -52 7 -52 -74 -92 -62 17 -91 -83 -21 -18 99 -64 -23 83 -69 -15 20 -41 -29 -24 -84 -76 0 -56 94 6 33 91 -42 18 13 -40 -5 80 71 29 -97 -35 17 -24 -70 57 -52 64 -74 11 -20 -25 -37 -11 -62 16 -97 -9 95 -78 -15 -72 36 -67 71 50 -81 -68 -32 -80 23 6 0 -87 -1 -12 53 36 -21 -51 -33 -36 -80 -86 -88 11 62 -33 85 9 38 -54 -10 -32 -46 -28 89 -47 -74 -86 99 26 -67 -28 84 -42 63 -17 -92 -8 36 -70 -6 -47 50 -94 -35 -15 -32 -11 84 42 -55 -76 -60 -85 -26 74 25 -16 59 29 35 1 91 -88 19 -27 42 21 -41 52 -66 51 52 -20 -81 -9 -46 -37 -76 -65 -8 -69 -97 54 0 57 -84 11 27 -51 32 -77 24 68 92 -95 78 3 -58 -65 67 29 82 92 -23 22 9 -38 -18 33 44 14 48 2 79 -68 -42 3 42 -90 95 26 15 37 -75 47 -54 97 84 -12 -19 -14 -83 -41 -69 -91 95 -21 -86 96 -33 84 -10 -42 33 61 87 17 97 48 42 -35 -61 0 -66 -60 -93 39 -77 -49 39 14 -90 -49 94 -58 89 -25 1 49 75 -19 57 75 43 97 -38 -14 -47 -21 -65 -29 25 8 32 -46 -70 79 -28 13 82 59 -26 -54 -88 -18 -54 -11 -1 -10 28 93 74 -77 -79 -79 5 87 -63 -8 -16 9 25 6 -92 65 24 23 -83 6 -95 -29 -75 36 9 -45 -75 99 -79 -80 -21 -95 55 97 -23 -6 40 -71 -51 9 57 37 61 33 94 -15 -62 65 33 61 21 -26 -54 80 -10 -17 -96 99 -46 -1 50 60 -30 -35 -44 19 -15 79 -96 -26 53 -25 -1 10 -61 -40 31 77 -81 77 -60 95 -46 44 37 0 17 -91 2 -69 -64 -27 -65 61 -20 76 38 -55 -97 -31 -73 77 61 -12 -70 79 -43 34 -63 -8 -37 16 8 -65 -75 92 80 43 39 -57 -37 48 -95 -42 30 45 86 -48 37 -52 61 64 18 -88 -15 -71 34 -85 -54 -43 -29 57 54 -62 -70 55 -63 -25 -31 -91 11 50 -33 30 67 -29 -13 65 -43 -10 -46 -96 -89 42 87 -70 99 47 -60 -25 2 77 92 35 -73 52 -15 80 22 -80 60 60 23 45 -37 15 28 8 90 -59 45 -35 -63 69 95 48 -52 67 -72 15 38 54 27 38 -9 -33 -12 -68 41 -66 91 43 78 -75 -27 13 73 -84 81 -69 24 -49 -24 -17 -59 -53 49 50 -59 78 -68 -57 -10 -45 -64 -86 -70 -30 5 -63 30 18 -64 -10 47 -67 -84 61 -65 90 25 23 -64 -93 -52 37 24 -65 -28 -17 -16 43 -8 0 -14 7 19 87 -87 -4 -89 -25 0 55 -18 56";
        String[] splitInput = input.split(" ");
        StringBuilder inputBuilder = new StringBuilder();
        for(String number : splitInput) {
            inputBuilder.append(number).append(",");
        }
        System.out.println(inputBuilder.toString().substring(0,inputBuilder.length() - 1));
        int[] alphabetHeightArray = new int[]{1,3,1,3,1,4,1,3,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5};
        String word = "abc";
        System.out.println(designerPdfViewer(alphabetHeightArray,word));

    }
}

